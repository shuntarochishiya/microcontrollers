C51 COMPILER V9.53.0.0   MAIN                                                              11/13/2024 18:53:30 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main.ls
                    -t) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>             // Include standard 8051 microcontroller register definitions
   2          #include "lcd.h"               // Include custom library for LCD functions
   3          
   4          // Define row pins for the keypad
   5          sbit r1 = P1^0;                // Set r1 to bit 0 of port P1
   6          sbit r2 = P1^1;                // Set r2 to bit 1 of port P1
   7          sbit r3 = P1^2;                // Set r3 to bit 2 of port P1
   8          sbit r4 = P1^3;                // Set r4 to bit 3 of port P1
   9          
  10          // Define column pins for the keypad
  11          sbit c1 = P1^4;                // Set c1 to bit 4 of port P1
  12          sbit c2 = P1^5;                // Set c2 to bit 5 of port P1
  13          sbit c3 = P1^6;                // Set c3 to bit 6 of port P1
  14          sbit c4 = P1^7;                // Set c4 to bit 7 of port P1
  15          
  16          // Declare function prototypes
  17          void row_scan();               // Function to scan keypad rows for input
  18          void delay(unsigned char);     // Delay function
  19          void send_num(unsigned int);   // Function to send a number to the LCD
  20          void calculate();              // Function to perform calculations
  21          
  22          // Global variables for calculation
  23          unsigned int y, a = 0, b = 0;  // Initialize variables for calculation operands
  24          unsigned char operator, flag = 0; // Operator and flag for calculation state
  25          unsigned char error = 0;       // Error flag for invalid input
  26          
  27          void main()
  28          {
  29   1          P1 = 0xf0;                 // Set rows as output and columns as input on port P1
  30   1          lcd_init();                // Initialize the LCD display
  31   1          lcd_cmd(0x85);             // Position cursor for "Tatiana" display
  32   1          lcd_string("Tatiana");     // Display "Tatiana" on LCD
  33   1          lcd_cmd(0xc3);             // Position cursor for "Kazakevich" display
  34   1          lcd_string("Kazakevich");  // Display "Kazakevich" on LCD
  35   1          delay(200);                // Delay for message display
  36   1          lcd_cmd(0x01);             // Clear LCD display
  37   1          while(1)
  38   1          {
  39   2              row_scan();            // Continuously scan the keypad rows
  40   2          }
  41   1      }
  42          
  43          void row_scan()
  44          {
  45   1          if (error)                 // If an error is detected
  46   1          {
  47   2              lcd_cmd(0x01);         // Clear LCD display
  48   2              lcd_string("Invalid Input"); // Display error message
  49   2              delay(200);            // Delay for error message
  50   2              error = 0;             // Reset error flag
  51   2              lcd_cmd(0x01);         // Clear LCD again
  52   2              flag = a = b = 0;      // Reset operands and flag
  53   2              return;
  54   2          }
C51 COMPILER V9.53.0.0   MAIN                                                              11/13/2024 18:53:30 PAGE 2   

  55   1      
  56   1          //---ROW 1---//
  57   1          r1 = 0;                    // Set row 1 to low
  58   1          r2 = r3 = r4 = 1;          // Set other rows to high
  59   1          if(c1 == 0)                // If column 1 is low
  60   1          {
  61   2              delay(32);             // Small debounce delay
  62   2              while(c1 == 0)         // Wait while button is pressed
  63   2              {
  64   3                  lcd_dat('7');      // Display '7' on LCD
  65   3                  if(flag == 0)      // If first operand
  66   3                      a = a*10 + 7;  // Add 7 to operand a
  67   3                  else               // If second operand
  68   3                      b = b*10 + 7;  // Add 7 to operand b
  69   3              }
  70   2          }
  71   1          if(c2 == 0)                // If column 2 is low
  72   1          {
  73   2              delay(32);
  74   2              while(c2 == 0)
  75   2              {
  76   3                  lcd_dat('8');      // Display '8'
  77   3                  if(flag == 0)
  78   3                      a = a*10 + 8;
  79   3                  else
  80   3                      b = b*10 + 8;
  81   3              }
  82   2          }
  83   1          if(c3 == 0)                // If column 3 is low
  84   1          {
  85   2              delay(32);
  86   2              while(c3 == 0)
  87   2              {
  88   3                  lcd_dat('9');      // Display '9'
  89   3                  if(flag == 0)
  90   3                      a = a*10 + 9;
  91   3                  else
  92   3                      b = b*10 + 9;
  93   3              }
  94   2          }
  95   1          if(c4 == 0)                // If column 4 is low
  96   1          {
  97   2              delay(32);
  98   2              while(c4 == 0)
  99   2              {
 100   3                  if (flag == 1)     // If operator already set
 101   3                  {
 102   4                      error = 1;     // Set error flag
 103   4                      break;
 104   4                  }
 105   3                  flag = 1;          // Set flag to indicate operator is selected
 106   3                  lcd_dat('/');      // Display '/' operator
 107   3                  operator = '/';    // Set operator to division
 108   3              }
 109   2          }
 110   1      
 111   1          //---ROW 2---//
 112   1          r2 = 0;                    // Set row 2 to low
 113   1          r1 = r3 = r4 = 1;          // Set other rows to high
 114   1          if(c1 == 0)
 115   1          {
 116   2              delay(32);
C51 COMPILER V9.53.0.0   MAIN                                                              11/13/2024 18:53:30 PAGE 3   

 117   2              while(c1 == 0)
 118   2              {
 119   3                  lcd_dat('4');
 120   3                  if(flag == 0)
 121   3                      a = a*10 + 4;
 122   3                  else
 123   3                      b = b*10 + 4;
 124   3              }
 125   2          }
 126   1          if(c2 == 0)
 127   1          {
 128   2              delay(32);
 129   2              while(c2 == 0)
 130   2              {
 131   3                  lcd_dat('5');
 132   3                  if(flag == 0)
 133   3                      a = a*10 + 5;
 134   3                  else
 135   3                      b = b*10 + 5;
 136   3              }
 137   2          }
 138   1          if(c3 == 0)
 139   1          {
 140   2              delay(32);
 141   2              while(c3 == 0)
 142   2              {
 143   3                  lcd_dat('6');
 144   3                  if(flag == 0)
 145   3                      a = a*10 + 6;
 146   3                  else
 147   3                      b = b*10 + 6;
 148   3              }
 149   2          }
 150   1          if(c4 == 0)
 151   1          {
 152   2              delay(32);
 153   2              while(c4 == 0)
 154   2              {
 155   3                  if (flag == 1)
 156   3                  {
 157   4                      error = 1;
 158   4                      break;
 159   4                  }
 160   3                  flag = 1;
 161   3                  lcd_dat('x');      // Display '*' operator
 162   3                  operator = 'x';    // Set operator to multiplication
 163   3              }
 164   2          }
 165   1      
 166   1          //---ROW 3---//
 167   1          r3 = 0;                    // Set row 3 to low
 168   1          r2 = r1 = r4 = 1;          // Set other rows to high
 169   1          if(c1 == 0)
 170   1          {
 171   2              delay(32);
 172   2              while(c1 == 0)
 173   2              {
 174   3                  lcd_dat('1');
 175   3                  if(flag == 0)
 176   3                      a = a*10 + 1;
 177   3                  else
 178   3                      b = b*10 + 1;
C51 COMPILER V9.53.0.0   MAIN                                                              11/13/2024 18:53:30 PAGE 4   

 179   3              }
 180   2          }
 181   1          if(c2 == 0)
 182   1          {
 183   2              delay(32);
 184   2              while(c2 == 0)
 185   2              {
 186   3                  lcd_dat('2');
 187   3                  if(flag == 0)
 188   3                      a = a*10 + 2;
 189   3                  else
 190   3                      b = b*10 + 2;
 191   3              }
 192   2          }
 193   1          if(c3 == 0)
 194   1          {
 195   2              delay(32);
 196   2              while(c3 == 0)
 197   2              {
 198   3                  lcd_dat('3');
 199   3                  if(flag == 0)
 200   3                      a = a*10 + 3;
 201   3                  else
 202   3                      b = b*10 + 3;
 203   3              }
 204   2          }
 205   1          if(c4 == 0)
 206   1          {
 207   2              delay(32);
 208   2              while(c4 == 0)
 209   2              {
 210   3                  if (flag == 1)
 211   3                  {
 212   4                      error = 1;
 213   4                      break;
 214   4                  }
 215   3                  flag = 1;
 216   3                  lcd_dat('-');      // Display '-' operator
 217   3                  operator = '-';    // Set operator to subtraction
 218   3              }
 219   2          }
 220   1      
 221   1          //---ROW 4---//
 222   1          r4 = 0;                    // Set row 4 to low
 223   1          r2 = r3 = r1 = 1;          // Set other rows to high
 224   1          if(c1 == 0)
 225   1          {
 226   2              delay(32);
 227   2              while(c1 == 0)
 228   2              {
 229   3                  lcd_cmd(0x01);     // Clear LCD display
 230   3                  flag = a = b = 0;  // Reset calculation variables
 231   3              }
 232   2          }
 233   1          if(c2 == 0)
 234   1          {
 235   2              delay(32);
 236   2              while(c2 == 0)
 237   2              {
 238   3                  lcd_dat('0');      // Display '0'
 239   3                  if(flag == 0)
 240   3                      a = a*10 + 0;
C51 COMPILER V9.53.0.0   MAIN                                                              11/13/2024 18:53:30 PAGE 5   

 241   3                  else
 242   3                      b = b*10 + 0;
 243   3              }
 244   2          }
 245   1          if(c3 == 0)
 246   1          {
 247   2              delay(32);
 248   2              while(c3 == 0)
 249   2              {
 250   3                  lcd_dat('=');      // Display '=' and perform calculation
 251   3                  calculate();
 252   3              }
 253   2          }
 254   1          if(c4 == 0)
 255   1          {
 256   2              delay(32);
 257   2              while(c4 == 0)
 258   2              {
 259   3                  if (flag == 1)
 260   3                  {
 261   4                      error = 1;
 262   4                      break;
 263   4                  }
 264   3                  flag = 1;
 265   3                  lcd_dat('+');      // Display '+' operator
 266   3                  operator = '+';    // Set operator to addition
 267   3              }
 268   2          }
 269   1      }
 270          
 271          void delay(unsigned char t)
 272          {
 273   1          unsigned int j;
 274   1          unsigned char i;
 275   1          for(i = 0; i < t; i++)     // Loop for delay time
 276   1              for(j = 0; j < 700; j++); // Nested loop to increase delay
 277   1      }
 278          
 279          void calculate()
 280          {
 281   1          lcd_cmd(0xc0);             // Move LCD cursor to new line
 282   1          if(operator == '+')
 283   1          {
 284   2              send_num(a + b);       // Perform addition
 285   2          }
 286   1          else if(operator == '-')
 287   1          {
 288   2              if(a > b)
 289   2                  send_num(a - b);   // Perform subtraction if a > b
 290   2              else
 291   2              {
 292   3                  lcd_dat('-');      // Display negative sign
 293   3                  send_num(b - a);   // Perform subtraction if b > a
 294   3              }
 295   2          }
 296   1          else if (operator == '/')
 297   1          {
 298   2              if (b != 0)
 299   2              {
 300   3                  unsigned int integer_part = a / b;
 301   3                  unsigned int remainder = a % b;
 302   3                  unsigned int decimal_part1 = (remainder * 10) / b;
C51 COMPILER V9.53.0.0   MAIN                                                              11/13/2024 18:53:30 PAGE 6   

 303   3                  unsigned int remainder2 = (remainder * 10) % b;
 304   3                  unsigned int decimal_part2 = (remainder2 * 10) / b;
 305   3      
 306   3                  send_num(integer_part);  // Display integer part
 307   3                  lcd_dat('.');            // Display decimal point
 308   3                  send_num(decimal_part1);  // Display first decimal digit
 309   3                  send_num(decimal_part2);  // Display second decimal digit
 310   3              }
 311   2              else
 312   2              {
 313   3                  lcd_cmd(0x01);
 314   3                  lcd_string("Error: div by 0"); // Display division error
 315   3              }
 316   2          }
 317   1          else if(operator == 'x')
 318   1          {
 319   2              send_num(a * b);       // Perform multiplication
 320   2          }
 321   1      
 322   1          delay(1000);                // Delay to show result
 323   1          flag = 0;                  // Reset flag and operands
 324   1          a = b = 0;
 325   1          operator = 0;
 326   1          lcd_cmd(0x01);             // Clear LCD
 327   1      }
 328          
 329          void send_num(unsigned int x)
 330          {
 331   1          if(x > 9999)               // Condition to display a 5-digit number
 332   1          {
 333   2              y = x/10000;           // Extract each digit and display
 334   2              lcd_dat(y + 0x30);
 335   2              x = x%10000;
 336   2              y = x/1000;
 337   2              lcd_dat(y + 0x30);
 338   2              x = x%1000;
 339   2              y = x/100;
 340   2              lcd_dat(y + 0x30);
 341   2              x = x%100;
 342   2              y = x/10;
 343   2              lcd_dat(y + 0x30);
 344   2              y = x%10;
 345   2              lcd_dat(y + 0x30);
 346   2          }
 347   1          else if(x > 999 && x < 9999)  // Condition to display a 4-digit number
 348   1          {
 349   2              y = x/1000;
 350   2              lcd_dat(y + 0x30);
 351   2              x = x%1000;
 352   2              y = x/100;
 353   2              lcd_dat(y + 0x30);
 354   2              x = x%100;
 355   2              y = x/10;
 356   2              lcd_dat(y + 0x30);
 357   2              y = x%10;
 358   2              lcd_dat(y + 0x30);
 359   2          }
 360   1          else if(x > 99 && x < 999)    // Condition to display a 3-digit number
 361   1          {
 362   2              y = x/100;
 363   2              lcd_dat(y + 0x30);
 364   2              x = x%100;
C51 COMPILER V9.53.0.0   MAIN                                                              11/13/2024 18:53:30 PAGE 7   

 365   2              y = x/10;
 366   2              lcd_dat(y + 0x30);
 367   2              y = x%10;
 368   2              lcd_dat(y + 0x30);
 369   2          }
 370   1          else if(x > 9 && x < 99)      // Condition to display a 2-digit number
 371   1          {
 372   2              y = x/10;
 373   2              lcd_dat(y + 0x30);
 374   2              y = x%10;
 375   2              lcd_dat(y + 0x30);
 376   2          }
 377   1          else
 378   1          {
 379   2              lcd_dat(x + 0x30);        // Display a single-digit number
 380   2          }
 381   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1536    ----
   CONSTANT SIZE    =     49    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
